from django.shortcuts import render, redirect
from django.contrib import messages
from django.utils.timezone import now as time
from django.contrib.auth.decorators import login_required, permission_required
from django.http import JsonResponse

from apps.provisions.forms import CreateProvisionsForm, EditProvisionsForm
from apps.provisions.models import Provisions

from amoeba.settings import PROJECT_NAME


@login_required(login_url='signin')
@permission_required(['provisions.view_provisions', 'provisions.add_provisions', 'provisions.change_provisions'], login_url='permission_not_allowed')
def provisions_list(request, pk=None):
    """
    This function displays a list of provisions, allows for the creation of new provisions, and editing
    of existing provisions.
    
    :param request: The HTTP request object that contains metadata about the request being made, such as
    the HTTP method, headers, and any data submitted in the request
    :param pk: pk is a parameter that represents the primary key of a specific Provisions object. It is
    used to retrieve and edit a specific Provisions object in the database. If pk is None, it means that
    the view is not trying to retrieve or edit a specific object, but rather display a list of all
    :return: an HTTP response generated by the `render` function, which renders the `provisions.html`
    template with the given context dictionary.
    """
    provisions_obj = Provisions.objects.all().order_by('id')
    create_form = CreateProvisionsForm()
    edit_form = EditProvisionsForm()
    if request.method == 'POST':
        if 'create_provisions' in request.POST:
            create_form = CreateProvisionsForm(request.POST)
            if create_form.is_valid():
                create_obj = create_form.save(commit=False)
                create_obj.created_by = request.user
                create_obj.save()
                return redirect('provisions_list')
            else:
                messages.error(request, create_form.errors)
        else:
            edit_form = EditProvisionsForm(
                request.POST, instance=Provisions.objects.get(pk=pk))
            if edit_form.is_valid():
                edit_obj = edit_form.save()
                edit_obj.last_modified_date = time()
                edit_obj.last_modified_by = request.user
                edit_obj.save()
                return redirect('provisions_list')
            else:
                messages.error(request, edit_form.errors)
    context = {
        "title": PROJECT_NAME + " | Provisions List",
        "create_form": create_form,
        "provisions_obj": provisions_obj,
        "edit_form": edit_form,
    }
    return render(request, 'Master_settings/Provisions/provisions.html', context)


@login_required(login_url='signin')
@permission_required(['provisions.delete_provisions'], login_url='permission_not_allowed')
def provisions_delete(request, pk):
    """
    This function deletes a provision object and displays a success message, or an error message if the
    object is already in use.
    
    :param request: The HTTP request object that contains metadata about the request being made, such as
    the user agent, headers, and any data submitted in the request
    :param pk: pk stands for primary key, which is a unique identifier for a specific instance of a
    model in a database. In this case, it is used to identify the specific provision object that needs
    to be deleted from the database
    :return: a redirect to the URL pattern named 'provisions_list'.
    """
    provisions_obj = Provisions.objects.get(pk=pk)
    try:
        provisions_obj.delete()
        messages.success(request, 'Provision Successfully Deleted.')
    except Exception as e:
        messages.error(request, "Unable to delete the data. Already used in application.")
        print("Delete is not possible.")
    return redirect('provisions_list')


@login_required(login_url='signin')
def get_provisions_data(request, pk):
    """
    The function retrieves the price data of a provisions object and returns it as a JSON response.
    
    
    """
    
    provisions_obj = Provisions.objects.get(pk=pk)
    
    data = {
        "price": provisions_obj.provisions_price,
        "provision_id": provisions_obj.id,
    }
    return JsonResponse(data, status=200)
