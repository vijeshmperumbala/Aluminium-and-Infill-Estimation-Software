from cmath import log
from django.http import JsonResponse
from django.shortcuts import render, redirect
from django.contrib import messages
from django.utils.timezone import now as time
from django.contrib.auth.decorators import login_required, permission_required


from amoeba.settings import PROJECT_NAME
from apps.enquiries.models import Enquiries
from apps.helper import enquiry_logger
from apps.product_master.models import STATUS
from apps.suppliers.forms import CreateBoQForm, CreateSuppliersForm, EditSuppliersForm
from apps.suppliers.models import BillofQuantity, Suppliers


@login_required(login_url='signin')
@permission_required(['suppliers.view_suppliers', 'suppliers.add_suppliers', 'suppliers.change_suppliers'], login_url='permission_not_allowed')
def list_suppliers(request, pk=None):
    """
    This function lists suppliers, allows for creating new suppliers, and editing existing suppliers.
    
    :param request: The HTTP request object that contains metadata about the request being made, such as
    the HTTP method, headers, and data
    :param pk: pk is a parameter that represents the primary key of a specific instance of the Suppliers
    model. It is used to retrieve and edit a specific supplier object in the database
    :return: an HTTP response generated by the `render` function, which renders the
    `list_suppliers.html` template with the given context.
    """
    suppliers_obj = Suppliers.objects.all().order_by('id')
    create_form = CreateSuppliersForm()
    edit_form = EditSuppliersForm()
    if request.method == 'POST':
        if 'create_suppliers' in request.POST:
            create_form = CreateSuppliersForm(request.POST)
            if create_form.is_valid():
                create_obj = create_form.save(commit=False)
                create_obj.created_by = request.user
                create_obj.save()
                return redirect('list_suppliers')
            else:
                messages.error(request, create_form.errors)
        else:
            edit_form = EditSuppliersForm(
                request.POST, instance=Suppliers.objects.get(pk=pk))
            if edit_form.is_valid():
                edit_obj = edit_form.save()
                edit_obj.last_modified_date = time()
                edit_obj.last_modified_by = request.user
                edit_obj.save()
                return redirect('list_suppliers')
            else:
                messages.error(request, edit_form.errors)
    context = {
        "title": PROJECT_NAME + " | Addon List",
        "create_form": create_form,
        "suppliers_obj": suppliers_obj,
        "edit_form": edit_form,
    }
    return render(request, 'Master_settings/Suppliers/list_suppliers.html', context)


@login_required(login_url='signin')
@permission_required(['suppliers.delete_suppliers'], login_url='permission_not_allowed')
def suppliers_delete(request, pk):
    """
    This function deletes a supplier object and displays a success message, or an error message if the
    object is already in use.
    
    :param request: The HTTP request object that contains metadata about the request being made, such as
    the user agent, headers, and data
    :param pk: pk stands for primary key, which is a unique identifier for each record in a database
    table. In this case, it is used to identify the specific supplier object that needs to be deleted
    from the Suppliers table
    :return: a redirect to the 'list_suppliers' URL.
    """
    
    supplier_obj = Suppliers.objects.get(pk=pk)
    try:
        supplier_obj.delete()
        messages.success(request, "Supplier Successfully Deleted.")
    except Exception as e:
        messages.error(request, "Unable to delete the data. Already used in application.")
        print("Delete is not possible.")
    return redirect('list_suppliers')


@login_required(login_url='signin')
@permission_required(['suppliers.view_billofquantity', 'suppliers.add_billofquantity'], login_url='permission_not_allowed')
def list_add_boq(request, pk):
    """
    This function adds a Bill of Quantity to an Enquiry and logs the action.
    
    :param request: The HTTP request object that contains metadata about the request being made, such as
    the HTTP method, headers, and data
    :param pk: pk is a parameter that represents the primary key of an Enquiry object. It is used to
    filter the BillofQuantity objects related to that Enquiry object and to assign the Enquiry ID to a
    newly created BillofQuantity object
    :return: an HTTP response with a rendered HTML template 'Enquiries/enquiry_boq_modal.html' along
    with a context dictionary containing a form object, a queryset of BillofQuantity objects filtered by
    enquiry ID, and the ID of the enquiry. If the request method is POST and the form is valid, the
    function returns a JSON response with a success status code. If the form is invalid
    """
    boq_obj = BillofQuantity.objects.filter(enquiry=pk).order_by('id')
    create_form = CreateBoQForm()
    if request.method == 'POST':
        create_form = CreateBoQForm(request.POST)
        if create_form.is_valid():
            create_obj = create_form.save(commit=False)
            if create_obj.boq_number:
                create_obj.created_by = request.user
                create_obj.enquiry_id = pk
                create_obj.save()
            enquiry_logger(enquiry=Enquiries.objects.get(pk=pk),message='BoQ Added '+create_obj.boq_number, action=1, user=request.user)
            data = {
                'success': True,
            }
            return JsonResponse(data, status=200)
        else:
            messages.error(request, create_form.errors)
    context = {
        'create_form': create_form,
        'boq_obj': boq_obj,
        'enquiry_id': pk,
    }
    return render(request, 'Enquiries/enquiry_boq_modal.html', context)


@login_required(login_url='signin')
@permission_required(['suppliers.delete_billofquantity'], login_url='permission_not_allowed')
def delete_boq(request, pk):
    """
    This function deletes a BillofQuantity object and logs the action, but returns an error message if
    the object is already in use.
    
    :param request: The HTTP request object that contains metadata about the request being made, such as
    the user agent, headers, and data
    :param pk: pk is a parameter that represents the primary key of a BillofQuantity object that needs
    to be deleted. The primary key is a unique identifier for each object in the database table
    :return: a JSON response with a success status of True and a status code of 200.
    """
    
    boq_obj = BillofQuantity.objects.get(pk=pk)
    try:
        boq_obj.delete()
        enquiry_logger(enquiry=boq_obj.enquiry,message='BoQ Deleted '+str(boq_obj.boq_number), action=3, user=request.user)
        messages.success(request, "BoQ Successfully Deleted.")
    except Exception as e:
        messages.error(request, "Unable to delete the data. Already used in application.")
        print("Delete is not possible.", e)
    data = {
        'success': True,
    }
    return JsonResponse(data, status=200)
